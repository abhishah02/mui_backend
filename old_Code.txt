=====================++++++++++++++++++++++==================================

//login old code

// if (req.body.password && req.body.email) {
//   let user = await User.findOne(req.body).select("-password");
//   if (user) {
//     Jwt.sign({ user }, jwtKey, { expiresIn: "2h" }, (err, token) => {
//       if (err) {
//         res.send({
//           result: "Something went wrong, Please try after sometime later..",
//         });
//       }
//       res.send({ user, auth: token });
//     });
//   } else {
//     res.send({ result: "No User Found" });
//   }
// } else {
//   res.send({ result: "User Password or Email Not Match" });
// }

=====================++++++++++++++++++++++==================================

//register old code

// result = result.toObject();
//     delete result.password;
//     Jwt.sign({ result }, jwtKey, { expiresIn: "2h" }, (err, token) => {
//       if (err) {
//         res.send({
//           result: "Something went wrong, Please try after sometime later..",
//         });
//       }
//       res.send({ result, auth: token });
//     });

=====================++++++++++++++++++++++==================================

//find only user

// console.log(users);

  // if (basicUser.role == "Basic") {
  //   console.log(basicUser);
  //   res.send(basicUser);
  // } else {
  //   res.send({ result: "No User found" });
  // }
  // res.send(user);

=====================++++++++++++++++++++++==================================

  //find user by its id

  // app.get("/admin/user/:id", async (req, res) => {
//   const users = await User(req.body);
//   const singleUser = User.findOne({ _id: users._id });

//   if (!singleUser) {
//     throw createError.NotFound("This user is not available.");
//   }

//   console.log(singleUser);
// });

=====================++++++++++++++++++++++==================================

// mongoose connection to mongo DB code 

// const mongoose = require("mongoose");

// mongoose
//   .connect(process.env.MONGODB_URI, {
//     dbName: process.env.DB_NAME,
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   })
//   .then(() => {
//     console.log("mongodb connected.");
//   })
//   .catch((err) => {
//     console.log(err.message);
//   });

// mongoose.connection.on("connected", () => {
//   console.log("Mongoose connected to DB");
// });

// mongoose.connection.on("error", (err) => {
//   console.log(err.message);
// });

// mongoose.connection.on("disconnected", () => {
//   console.log("Mongoose connection is disconnected.");
// });

// process.on("SIGINT", async () => {
//   await mongoose.connection.close();
//   process.exit(0);
// });

=====================++++++++++++++++++++++==================================

//old query of registertion

// db.query(
    //   "INSERT INTO `tbl_user`( `USER_ID`, `USER_NAME`, `USER_EMAIL`, `USER_PASSWORD`) VALUES (? , ? , ? , ?)",
    //   [uuid.v4(), USER_NAME, USER_EMAIL, USER_PASSWORD]
    // );

    // console.log(req.body);
    // res.send(req.body);

    // const result = await registerSchema.validateAsync(req.body);

    // console.log(result);

    // const doesExist = await User.findOne({ USER_EMAIL: result.USER_EMAIL });
    // if (doesExist) {
    // throw createError.Conflict(
    //   `${result.USER_EMAIL} is already been registered.`
    // );
    // }

    // res.send(result);
    // let user = new User(result);

    // let savedUser = await user.save();
    // res.send(savedUser);

=====================++++++++++++++++++++++==================================